// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log('Supabase Client: Initializing...');
console.log('Supabase Client: URL exists:', !!SUPABASE_URL);
console.log('Supabase Client: Key exists:', !!SUPABASE_PUBLISHABLE_KEY);

if (!SUPABASE_URL) {
  console.error('Supabase Client: Missing VITE_SUPABASE_URL environment variable');
  throw new Error('Missing Supabase URL. Please check your environment variables.');
}

if (!SUPABASE_PUBLISHABLE_KEY) {
  console.error('Supabase Client: Missing VITE_SUPABASE_ANON_KEY environment variable');
  throw new Error('Missing Supabase Anon Key. Please check your environment variables.');
}

console.log('Supabase Client: Initializing with URL:', SUPABASE_URL);

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'x-application-name': 'birdie-ai-matchmaker'
    }
  }
});

// Add error handling for auth state changes
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Supabase Client: Auth state changed:', event);
  console.log('Supabase Client: Session exists:', !!session);
  if (session?.user) {
    console.log('Supabase Client: User ID:', session.user.id);
  }
});